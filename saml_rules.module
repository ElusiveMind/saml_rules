<?php

/**
 * @file
 * Contains saml_rules.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use OneLogin\Saml2\Settings;
use OneLogin\Saml2\Response;
use OneLogin\Saml2\Auth;
use OneLogin\Saml2\Error;
use OneLogin\Saml2\Utils;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function saml_rules_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.saml_rules':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module works with a SAML provider to perform actions when accounts are created. This can be
        anything from assigning roles to users to configuring actions based on variables inside of the data sent by the SAML provider.') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_user_login().
 */
function saml_rules_user_login($account) {
  $config = \Drupal::config('samlauth.settings');
  define('ONELOGINCUSTOMPATH', $config->get('sp_cert_folder'));
  
  $settings = [
    'sp' => [
      'x509cert' => file_get_contents($config->get('sp_cert_folder') . '/certs/sp.crt'),
      'privateKey' => file_get_contents($config->get('sp_cert_folder') . '/certs/sp.key'),
      'entityId' => $config->get('sp_entity_id'),
      'assertionConsumerService' => [
        'url' => 'https://' . $_SERVER['SERVER_NAME'] . '/saml/acs',
      ],
    ],
    'idp' => [
      'x509cert' => $config->get('idp_x509_certificate'),
      'entityId' => $config->get('idp_entity_id'),
      'singleSignOnService' => [
        'url' => $config->get('idp_single_sign_on_service'),
      ],
      'singleLogoutService' => [
        'url' => $config->get('idp_single_log_out_service'),
      ],
    ],
  ];

  $settings = new Settings($settings);
  $resp['errors'] = array();
  $resp['lastError'] = $resp['lastErrorException'] = null;
  if (isset($_POST['SAMLResponse'])) {
    // AuthnResponse -- HTTP_POST Binding
    $response = new Response($settings, $_POST['SAMLResponse']);
    $resp['lastResponse'] = $response->getXMLDocument();
    if ($response->isValid($requestId)) {
      $resp['attributes'] = $response->getAttributes();
      $resp['attributesWithFriendlyName'] = $response->getAttributesWithFriendlyName();
      $resp['nameid'] = $response->getNameId();
      $resp['nameidFormat'] = $response->getNameIdFormat();
      $resp['nameidNameQualifier'] = $response->getNameIdNameQualifier();
      $resp['nameidSPNameQualifier'] = $response->getNameIdSPNameQualifier();
      $resp['authenticated'] = true;
      $resp['sessionIndex'] = $response->getSessionIndex();
      $resp['sessionExpiration'] = $response->getSessionNotOnOrAfter();
      $resp['lastMessageId'] = $response->getId();
      $resp['lastAssertionId']= $response->getAssertionId();
      $resp['lastAssertionNotOnOrAfter'] = $response->getAssertionNotOnOrAfter();
    }
    else {
      $resp['errors'][] = 'invalid_response';
      $resp['lastErrorException'] = $response->getErrorException();
      $resp['lastError'] = $response->getError();
    }
    
    if (!empty($resp['errors'])) {
      print "<pre>Errors\n"; print_r($resp['errors']); exit(); 
    }
    else {
      // The first thing we want to do is make sure that all of the attributes
      // passed are available to our admin ui. This ensures they will be available
      // for mapping. We will check a hash of all of the attribute keys ands if it
      // matches what we have stored, we will not update. Otherwise we will.
      $config = \Drupal::config('saml_rules.settings');
      $attributes_hash = $config->get('attributes_hash');
      $keys = array_keys($resp['attributes']);
      if (md5($keys) != $attributes_hash) {
        $config->set('attributes', $keys);
      }

      // Load our SAML arrributes into PHP variables for string replacement.
      $attributes = array_keys($resp['attributes']);
      foreach ($attributes as $attribute) {
        $$attribute = $resp['attributes'][$attribute][0];
      }

      // Load the current user.
      $user = User::load(\Drupal::currentUser()->id());

      // User field rule mappings are performed here.
      $config = $this->config('saml_rules.user_field_rules');
      $rules = $config->get('rules');
      foreach ($rules as $rule) {
        if ($rule['rule_type'] == 'condition') {
          if ($rule['condition_operand'] == 'equal') {
            if ($$rule['condition_saml'] == $rule['condition_value']) {
              $$rule['user_field'] == preg_replace("/\[(\w+)\]/e", "\$\\1", $rule['user_value']);
              $user->set($rule['user_field'], $$rule['user_field']);
            }
          }
          else {
            if ($$rule['condition_saml'] != $rule['condition_value']) {
              $$rule['user_field'] == preg_replace("/\[(\w+)\]/e", "\$\\1", $rule['user_value']);
              $user->set($rule['user_field'], $$rule['user_field']);
            }
          }
        }
        else {
          $$rule['user_field'] == preg_replace("/\[(\w+)\]/e", "\$\\1", $rule['user_value']);
          $user->set($rule['user_field'], $$rule['user_field']);
        }
      }

      // Authentication rule mappings are performed here.
      $config = $this->config('saml_rules.authentication_rules');
      $rules = $config->get('rules');
      foreach ($rules as $rule) {
        if ($$rule['saml_attribute'] == $rule['saml_value']) {
          if ($rule['action'] == 'email') {
            $mail = preg_replace("/\[(\w+)\]/e", "\$\\1", $rule['email']);
            $user->setEmail($mail);
          }
          else {
            foreach ($rule['roles'] as $role) {
              $user->addRole($role);
            }
          }
        }
      }
      $user->save();
    }
  }
}
